# See release notes: uncomment these lines in order to force your APK to be generated with 64-bit ARM binaries
# (needed when using an IDE such as Adobe Animate that currently only provides armv7 and x86 as the options via the UI)
#DefaultArch=armv8
#OverrideArch=armv8

# See release notes and https://github.com/Gamua/Adobe-Runtime-Support/issues/58
#UncompressedExtensions=emd,tfl,tflite,pb

# Default is to prefiix the package with 'air.' - to turn this off, uncomment the below line
#AddAirToAppID=false

# If you need to increase the heap available to Java when packaging an Android app, you can use the below setting
# when ADT is run from another tool. (If run from the command line, just add -Xmx=2048m or similar to the command
# line within the ADT launch script..)
#JavaXmx=2048m

# For debugging, set this to 'true' and a file "adt.log" should be generated in your user's home folder
#DebugOut=true

# To override the creation of an Android APK file, and to instead create an Android App Bundle, the below
# flag can be uncommented. Note that the bundle may end up with an "apk" file extension
#CreateAndroidAppBundle=true

# When creating an Android App Bundle, this flag can be used to output the Android Studio project
# files in a subfolder of your build directory (rather than using a temporary location that gets
# cleaned up on exit).
#KeepAndroidStudioOutput=true

# For convenience, rather than using "-platformsdk" on the command line, these can be set up here:
#AndroidPlatformSDK=path_to_sdk
#iOSPlatformSDK=path_to_sdk

# JAVA_HOME is usually picked up from an environment variable but this can override it:
#JAVA_HOME=path_to_JDK_installation

# on macos platorms, use the native codesign task rather than trying to use ADT's internal code:
#UseNativeCodesign=true
